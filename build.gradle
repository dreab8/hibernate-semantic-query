buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name 'jboss-nexus'
			url "http://repository.jboss.org/nexus/content/groups/public/"
		}
		maven {
			name "jboss-snapshots"
			url "http://snapshots.jboss.org/maven2/"
		}
	}
	dependencies {
		classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
		classpath 'org.hibernate.build.gradle:gradle-animalSniffer-plugin:1.0.1.Final'
	}
}

plugins {
	id 'com.gradle.build-scan' version '1.0'
}

apply plugin: 'java'
apply plugin: Antlr4Plugin

apply plugin: 'org.hibernate.build.gradle.animalSniffer'

apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'

apply plugin: 'idea'
apply plugin: 'eclipse'



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Project section

repositories {
	mavenCentral()
	jcenter()
}

sourceCompatibility = 1.8

group = 'org.hibernate'
version = '1.0.0-SNAPSHOT'

configurations {
	provided {
		description = 'Non-exported compile-time dependencies.'
	}
}

dependencies {
	compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
	compile 'org.jboss.logging:jboss-logging:3.3.0.Final'

	provided 'org.jboss.logging:jboss-logging-annotations:2.0.0.Final'

	antlr 'org.antlr:antlr4:4.7'

	runtime 'org.antlr:antlr4-runtime:4.5.2'

	testCompile group: 'junit', name: 'junit', version: '4.11'

	testRuntime 'log4j:log4j:1.2.17'

//	animalSnifferSignature 'org.codehaus.mojo.signature:java16:1.0@signature'
}

task compile
tasks.withType( JavaCompile ).each {
	tasks.compile.dependsOn it
	it.options.compilerArgs += [
			"-nowarn",
			"-encoding", "UTF-8"
	]
}

//tasks.generateGrammarSource {
//	outputDirectory = file( "${outputDirectory}/org/hibernate/sqm/parser/hql/internal/antlr" )
//	// ugh!  https://discuss.gradle.org/t/antlr-v4-visitor-generation/10017/1
//	if ( arguments == null ) {
//		arguments = ['-visitor']
//	}
//	else {
//		arguments += ['-visitor']
//	}
//}

task antlr(dependsOn: generateGrammarSource)

idea {
	project {
		jdkName = "${sourceCompatibility}"
		languageLevel = "${sourceCompatibility}"
		vcs = 'Git'
	}
	module {
		excludeDirs = [file( ".gradle" )]
		excludeDirs += file( "$buildDir/classes" )
		excludeDirs += file( "$buildDir/packages" )
		excludeDirs += file( "$buildDir/dependency-cache" )
		excludeDirs += file( "$buildDir/libs" )
		excludeDirs += file( "$buildDir/reports" )
		excludeDirs += file( "$buildDir/resources" )
		excludeDirs += file( "$buildDir/test-results" )
		excludeDirs += file( "$buildDir/tmp" )

		downloadSources = true
		scopes.PROVIDED.plus += [configurations.provided]
	}
}

publishing {
	publications {
		mavenJava( MavenPublication ) {
			from components.java

			artifact( sourcesJar ) {
				classifier 'sources'
			}
		}
	}
	repositories {
		if ( (project.version as String).endsWith( '-SNAPSHOT' ) ) {
			maven {
				name 'jboss-snapshots-repository'
				url 'https://repository.jboss.org/nexus/content/repositories/snapshots'
			}
		}
		else {
			maven {
				name 'jboss-releases-repository'
				url 'https://repository.jboss.org/nexus/service/local/staging/deploy/maven2/'
			}
		}
	}
}

task sourcesJar(type: Jar, dependsOn: compileJava) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

task wrapper(type: Wrapper) {
	gradleVersion = 3.1
}

buildScan {
	// the buildscan plugin is used to generate reports that are often useful
	// in helping the Gradle team track down build problems.
	licenseAgreementUrl = 'https://gradle.com/terms-of-service'
	licenseAgree = 'yes'
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Custom Antlr v4 Plugin (to work with Gradle 3)

class Antlr4Plugin implements Plugin<Project> {
	void apply(Project project) {
		project.with {
			apply plugin : 'java'

			configurations.maybeCreate 'antlr'

			Antlr4GenerationTask genTask = tasks.create 'generateGrammarSource', Antlr4GenerationTask
			genTask.group = 'Build'
			genTask.description = 'Generate source code from ANTLR grammar'

			tasks.getByName('compileJava').dependsOn genTask

			SourceSet mainSourceSet = project.convention.getPlugin( JavaPluginConvention ).sourceSets.getByName( SourceSet.MAIN_SOURCE_SET_NAME );
			mainSourceSet.compileClasspath += configurations.antlr

			SourceSet testSourceSet = project.convention.getPlugin( JavaPluginConvention ).sourceSets.getByName( SourceSet.TEST_SOURCE_SET_NAME );
			testSourceSet.compileClasspath += configurations.antlr

			project.afterEvaluate({
				mainSourceSet.java.srcDir( genTask.outputDirectory )
			})

		}
	}
}

class Antlr4GenerationTask extends DefaultTask {
	def String baseInputDirectory = 'src/main/antlr'
	def String packageName = 'org.hibernate.sqm.parser.hql.internal.antlr'
	def List<String> grammarNames = ['HqlLexer.g4', 'HqlParser.g4']

	def String outputDirectoryPath = "generated-src/antlr/main"

	@InputFiles
	@SkipWhenEmpty
	public FileCollection getSource() {
		return this.getProject().files(
				grammarNames.collect( {name-> baseInputDirectory + '/' + packageName.replace( '.', '/' ) + '/' + name } )
		);
	}

	@OutputDirectory
	File getOutputDirectory() {
		return project.file( "${project.buildDir}/${outputDirectoryPath}" )
	}

	@TaskAction
	void antlrGeneration() {
		File packagedOutputDirectory = new File( outputDirectory, packageName.replace( '.', '/' ) )
		packagedOutputDirectory.mkdirs()

		source.forEach({File grammarFile->
			project.javaexec {
				main 'org.antlr.v4.Tool'
				classpath project.configurations.antlr
				args '-o', packagedOutputDirectory.absolutePath
				args '-lib', grammarFile.parentFile.absolutePath
				args '-long-messages'
				args '-listener'
				args '-visitor'
				args grammarFile.absolutePath
			}
		})
	}
}